# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# * Caches downloaded dependencies and plugins between invocation.

stages:
  - build
  - package
  - deploy

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttp.proxyHost=wwwcache.keele.ac.uk -Dhttp.proxyPort=8080 -Dhttps.proxyHost=wwwcache.keele.ac.uk -Dhttps.proxyPort=8080 -Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
    - .m2/repository

build:
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS install'
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}"
    paths:
    - target/*.jar
    - etc/
  image: maven:3.3.9-jdk-8

buildrpm:
  stage: package
  script:
    - mkdir -p /root/rpmbuild/SOURCES
    - yum -y install rpm-build
    - export VERSION=$(sed -n '0,/^.*<version>\(.*\)<\/version>.*$/s//\1/p' pom.xml)
    - echo "%version ${VERSION}" >> "/root/.rpmmacros"
    - echo "%buildno ${CI_JOB_ID}" >> "/root/.rpmmacros"
    - echo "%commit ${CI_COMMIT_SHA}" >> "${HOME}/.rpmmacros"
    - rpmbuild -ba paella-opencast.spec
    - cp /root/rpmbuild/RPMS/noarch/*.rpm .
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}-RPM"
    paths:
      - paella-opencast*.rpm
  image: centos:7

pushtorepo:testing:
  stage: deploy
  dependencies:
    - buildrpm
  script:
    - export RPM_FILE=`ls paella-opencast*rpm`
    - curl -u $KATELLO_USER:$KATELLO_PASS --insecure -X POST "${KATELLO_SERVER}/katello/api/repositories/${KATELLO_TESTING_REPO_ID}/upload_content" -F "content=@${RPM_FILE}"
  image: centos:7
  only:
    - keele

pushtorepo:stable:
  stage: deploy
  dependencies:
    - buildrpm
  script:
    - export RPM_FILE=`ls paella-opencast*rpm`
    - curl -u $KATELLO_USER:$KATELLO_PASS --insecure -X POST "${KATELLO_SERVER}/katello/api/repositories/${KATELLO_STABLE_REPO_ID}/upload_content" -F "content=@${RPM_FILE}"
  image: centos:7
  only:
    - keele
  when: manual
